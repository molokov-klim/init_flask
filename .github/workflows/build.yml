name: Build and Deploy

on: [push]

env:
  #DOCKER_DRIVER: overlay2
  CI_REGISTRY_USERNAME: ${{ secrets.CI_REGISTRY_USERNAME }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  CI_PROJECT_NAME: ${{ github.event.repository.name }}
  FLASK_ENV: production
  FLASK_PORT: 4022

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ env.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ env.CI_REGISTRY_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.CI_REGISTRY_USERNAME }}/${{ env.CI_PROJECT_NAME }}:latest .
          docker push ${{ env.CI_REGISTRY_USERNAME }}/${{ env.CI_PROJECT_NAME }}:latest
        env:
          CI_REGISTRY_USERNAME: ${{ env.CI_REGISTRY_USERNAME }}
          CI_REGISTRY_PASSWORD: ${{ env.CI_REGISTRY_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: build

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to server
        run: |
          sshpass -p "${{ env.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          docker login -u '${{ env.CI_REGISTRY_USERNAME }}' -p '${{ env.CI_REGISTRY_PASSWORD }}'
          docker pull ${{ env.CI_REGISTRY_USERNAME }}/${{ env.CI_PROJECT_NAME }}:latest
          docker stop ${{ env.CI_PROJECT_NAME }} || true
          docker rm ${{ env.CI_PROJECT_NAME }} || true
          docker run -d -p ${{ env.FLASK_PORT }}:${{ env.FLASK_PORT }} --name ${{ env.CI_PROJECT_NAME }} -e FLASK_ENV=${{ env.FLASK_ENV }} ${{ env.CI_REGISTRY_USERNAME }}/${{ env.CI_PROJECT_NAME }}:latest
          images=\$(docker images -f 'dangling=true' -q)
          if [ -n \"\$images\" ]; then
            docker rmi -f \$images
          fi"
